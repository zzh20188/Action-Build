name: Build OnePlus_SukiSU Ultra All
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "分支"
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_ace2pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11_t
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - GitHub有bug可能不显示最后一项,误使用此项
      CPUD:
        type: choice
        description: "处理器代号"
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        type: choice
        description: "内核初始安卓版本"
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
       type: choice
       description: "内核版本"
       required: true
       default: "5.15"
       options:
         - "5.10"
         - "5.15"
         - "6.1"
         - "6.6"
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      SUFFIX:
        type: string
        description: "自定义内核后缀 (留空则使用随机字符串)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否使用极速构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子(VFS)？"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "是否启用添加更多的ZRAM算法？"
        required: true
        default: false

jobs:
  build:
    name: For ${{ github.event.inputs.FEIL }} ${{ github.event.inputs.KERNEL_VERSION }} ${{ github.event.inputs.BUILD_METHOD }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Create and enable 6G swap
        run: |
          sudo swapoff -a
          sudo fallocate -l 6G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Show selected inputs debug
        run: |
          echo "Selected CPU: ${{ github.event.inputs.CPU }}"
          echo "Selected FEIL: ${{ github.event.inputs.FEIL }}"
          echo "Selected CPUD: ${{ github.event.inputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ github.event.inputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl
          sudo apt install -y python3 git curl ccache

      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"


      # 自定义内核后缀
      - name: Modify setlocalversion suffix if SUFFIX is set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          ANDROID_VERSION="${{ github.event.inputs.ANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            if [ "$FAST_BUILD" = "true" ]; then
              sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
            else
              # 使用官方脚本编译，当使用 build_with_bazel 时，可能受特殊符号数量限制，需要小于4
              sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/(-[0-9]+-o-)?-g[0-9a-f]{7,}.*$//'\'')' "$path"
              sed -i "\$s|echo \"\\\$res\"|echo \"\$res-${SUFFIX}\"|" "$path"
            fi
          done
          git add -A
          git commit -m "Updated kernel version suffix"
      # 添加 SukiSU Ultra
      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "正在打susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          echo "正在打zram补丁"
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          echo "zram_patch完成"
          fi

          cd ./common
          if [[ "${{ github.event.inputs.FEIL }}" == "oneplus_13" || "${{ github.event.inputs.FEIL }}" == "oneplus_ace5_pro" ]]; then
           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "susfs_patch完成"

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "隐藏应用_patch完成"

      # OGKI转换GKI，可以直接使用官方 dtbo 开机，按需是否启用
      - name: Apply Convert HMBIRD_OGKI to HMBIRD_GKI
        if: ${{ github.event.inputs.KERNEL_VERSION == '6.6' }}
        run: |
            cd kernel_workspace/kernel_platform/common
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            wget https://github.com/Numbersf/Action-Build/raw/main/patchs/hmbird_patch.patch
            echo "正在打OGKI转换GKI补丁"
            patch -p1 -F 3 < hmbird_patch.patch
            echo "OGKI转换GKI_patch完成"

      - name: Apply VFS
        if: ${{ github.event.inputs.VFS == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            echo "正在打vfs补丁"
            patch -p1 -F 3 < syscall_hooks.patch
            echo "vfs_patch完成"

      - name: Apply LZ4KD
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
            echo "正在打lz4kd补丁"
            patch -p1 -F 3 < lz4kd.patch || true
            echo 'lz4kd_patch完成'
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4k_oplus.patch ./
            echo "正在打lz4k_oplus补丁"
            patch -p1 -F 3 < lz4k_oplus.patch || true
            echo 'lz4k_oplus_patch完成'

      # 配置信息
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ github.event.inputs.KERNEL_VERSION }}"

          # SukiSU Ultra配置
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          # VFS配置
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi

          # SUSFS配置
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

          # LZ4KD配置*
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
              echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "6.6" ] && [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
              if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
              else
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              fi
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "6.6" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android14" ] || [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android15" ]; then
              if [  -e ./common/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./common/modules.bzl"
              fi

              if [  -e ./msm-kernel/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./msm-kernel/modules.bzl"
                echo "CONFIG_ZSMALLOC=y" >> "msm-kernel/arch/arm64/configs/${{ github.event.inputs.CPUD }}-GKI.config"
                echo "CONFIG_ZRAM=y" >> "msm-kernel/arch/arm64/configs/${{ github.event.inputs.CPUD }}-GKI.config"
              fi
              
              echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
            elif [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ] || [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.15" ]; then
              rm "common/android/gki_aarch64_modules"
              touch "common/android/gki_aarch64_modules"
            fi

            if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
              echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
            fi
          fi

      - name: Enable lto=thin For FAST
        if: ${{ (github.event.inputs.KERNEL_VERSION == '5.10' || github.event.inputs.KERNEL_VERSION == '5.15') && github.event.inputs.FAST_BUILD == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform

          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig

          echo "Enabling ThinLTO in $DEFCONFIG"

          # 开启 CONFIG_LTO
          sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"

          # 替换 FULL/NONE 为 THIN，防止冲突
          sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"

          # 添加 THIN（若未设置）
          grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"

      - name: Build Kernel FAST
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        run: |
          KERNEL_VERSION="${{ github.event.inputs.KERNEL_VERSION }}"

          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r450784e/bin:$PATH"
          elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts-master/clang/host/linux-x86/clang-r416183b/bin:$PATH"
          else
            echo "⚠️ 当前内核版本 \"$KERNEL_VERSION\" 没有对应 clang 工具链，回退使用官方构建脚本（同时开启自定义内核后缀可能导致内核后缀错乱）"
            echo "请考虑关闭 FAST_BUILD 或补充该版本 clang 路径"
            cd kernel_workspace
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
            exit 0
          fi
          ccache clang -v
          sudo apt install -y libelf-dev
          cd kernel_workspace/kernel_platform/common

          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
          # 如果是 5.10，添加 LLVM_IAS=1
          if [[ "$KERNEL_VERSION" == "5.10" ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi
          make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
          make -j$(nproc --all) O=out $MAKE_ARGS

      - name: Fallback Build Kernel
        if: ${{ github.event.inputs.FAST_BUILD == 'false' }}
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" || "${{ github.event.inputs.CPU }}" == "sm7675" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          fi
      

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git

          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          # 查找 Image 文件
          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
             if [ -n "$image_path" ]; then
               echo "使用 make 编译的统一路径，无需复制"
             fi
          fi

          # 复制 Image 到同一个路径方便直接调用
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "源文件路径与目标路径相同，跳过复制"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "未找到 Image 文件，无法复制，构建可能失败"
            exit 1
          fi

          # 复制其它可能需要的文件（如果存在），部分 img 并不会直接安装，仅复制到 zip 供参考使用
          if [ "${{ github.event.inputs.CPU }}" = "sm8750" ]; then
          for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
            if [ -f "$dir1$file" ]; then
              target_name="$file"
              # 特殊处理 system_dlkm.erofs.img 的目标名
              if [ "$file" = "system_dlkm.erofs.img" ]; then
                target_name="system_dlkm.img"
              fi
              cp "$dir1$file" "./AnyKernel3/$target_name"
            else
              echo "$file 不存在，跳过复制"
            fi
          done
          fi

      - name: Apply patch_linux and replace Image
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/main/patchs/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      # 下载 SUSFS 模块（CI）
      - name: Download Latest SUSFS Module from CI
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No successful run found for branch v1.5.2+"
            exit 1
          fi

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')

          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
          cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/


      # 解压 SukiSU Ultra（CI）（不自动安装）
      - name: Download Latest SukiSU-Ultra APK from CI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          run_id=$(gh api \
            "repos/SukiSU-Ultra/SukiSU-Ultra/actions/workflows/build-manager.yml/runs?branch=main&status=success&per_page=1" \
            --jq '.workflow_runs[0].id')
          if [[ -z "$run_id" ]]; then
            echo "No successful workflow run found."
            exit 1
          fi

          artifact_url=$(gh api \
            "repos/SukiSU-Ultra/SukiSU-Ultra/actions/runs/$run_id/artifacts" \
            --jq '.artifacts[] | select(.name == "manager") | .archive_download_url')

          if [[ -z "$artifact_url" ]]; then
            echo "No manager artifact found."
            exit 1
          fi

          curl -L -H "Authorization: token $GITHUB_TOKEN" -o manager.zip "$artifact_url"
          unzip -j manager.zip "*.apk" -d ./AnyKernel3/

      # 从一加源码中获取适用的 Android 版本信息，注意是系统 Android 版本而非你填写的内核 Android 版本，非一加官方源码可能需要修改或删除这一步
      - name: Set zip suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}" >> $GITHUB_OUTPUT

      - name: Auto map FEIL to Android version by manifest
        id: feil_clean
        run: |
          feil="${{ github.event.inputs.FEIL }}"
          cpu="${{ github.event.inputs.CPU }}"
          xml=".repo/manifests/${feil}.xml"

          if [ ! -f "$xml" ]; then
            echo "Manifest $xml not found,This is expected behavior,not an error.Attempting to download from branch oneplus/$cpu..."
            mkdir -p .repo/manifests
            git clone --depth=1 --branch oneplus/$cpu https://github.com/OnePlusOSS/kernel_manifest.git repo_tmp || {
              echo "Failed to clone branch oneplus/$cpu"
              echo "value=${feil}_AndroidUnknown" >> "$GITHUB_OUTPUT"
              exit 0
            }

            if [ -f "repo_tmp/${feil}.xml" ]; then
              mv "repo_tmp/${feil}.xml" "$xml"
            else
              echo "Manifest file ${feil}.xml not found in branch oneplus/$cpu"
              echo "value=${feil}_AndroidUnknown" >> "$GITHUB_OUTPUT"
              rm -rf repo_tmp
              exit 0
            fi
            rm -rf repo_tmp
          fi

          echo "Manifest $xml found."

          # 去掉末尾的 _x（只删一次）
          feil_base=$(echo "$feil" | sed -E 's/_[a-z]$//')

          # 提取 revision 并解析 Android 版本
          revision_full=$(grep -oP '<project[^>]*name="android_kernel[^"]*"[^>]*revision="\K[^"]+' "$xml" | head -n1 || true)

          if [ -n "$revision_full" ]; then
            android_ver=$(echo "$revision_full" | grep -oP '_v?_?\K([0-9]+\.[0-9]+(?:\.[0-9]+)?)' || true)
            if [ -n "$android_ver" ]; then
              clean_feil="${feil_base}_Android${android_ver}"
            else
              clean_feil="${feil_base}_AndroidUnknown"
            fi
          else
            clean_feil="${feil_base}_AndroidUnknown"
          fi

          echo "value=$clean_feil" >> "$GITHUB_OUTPUT"


      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}_KPM${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*
